// RegieMarches.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import 'views/examples/regie-marches/Styletable.css';  // Importer le fichier CSS

const PaiementExploitation = () => {
  const [paiements, setPaiements] = useState([]);
  const [formData, setFormData] = useState({
    quittance: '',
    montant: '',
    rubrique: '',
    date_du_dernier_paiement: '',
    nouvelle_date_de_paiement: '',
  });

  // Charger les paiements depuis l'API
  useEffect(() => {
    axios.get('http://localhost:8000/api/paiments/')
      .then(response => {
        setPaiements(response.data);
      })
      .catch(error => {
        console.error('Il y a eu une erreur!', error);
      });
  }, []);

  // GÃ©rer la modification des valeurs dans le formulaire
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value,
    }));
  };

  // Ajouter un paiement
  const handleAddPaiement = (e) => {
    e.preventDefault();
    axios.post('http://localhost:8000/api/paiments/', formData)
      .then(response => {
        setPaiements([...paiements, response.data]);
        setFormData({ quittance: '', montant: '', rubrique: '', date_du_dernier_paiement: '', nouvelle_date_de_paiement: '' });
      })
      .catch(error => {
        console.error('Il y a eu une erreur!', error);
      });
  };

  // Modifier un paiement
  const handleEditPaiement = (id) => {
    const paiement = paiements.find(p => p.id === id);
    setFormData({
      quittance: paiement.quittance,
      montant: paiement.montant,
      rubrique: paiement.rubrique,
      date_du_dernier_paiement: paiement.date_du_dernier_paiement,
      nouvelle_date_de_paiement: paiement.nouvelle_date_de_paiement,
    });
  };

  // Supprimer un paiement
  const handleDeletePaiement = (id) => {
    axios.delete(`http://localhost:8000/api/paiments/${id}/`)
      .then(() => {
        setPaiements(paiements.filter(paiement => paiement.id !== id));
      })
      .catch(error => {
        console.error('Il y a eu une erreur!', error);
      });
  };

  return (
    <div className="paiement-containerr">
      <h2>Paiement d'Exploitation</h2>
      <form onSubmit={handleAddPaiement}>
        <input type="number" name="quittance" value={formData.quittance} onChange={handleInputChange} placeholder="Quittance" required />
        <input type="number" name="montant" value={formData.montant} onChange={handleInputChange} placeholder="Montant" required />
        <input type="number" name="rubrique" value={formData.rubrique} onChange={handleInputChange} placeholder="Rubrique" required />
        <input type="date" name="date_du_dernier_paiement" value={formData.date_du_dernier_paiement} onChange={handleInputChange} required />
        <input type="date" name="nouvelle_date_de_paiement" value={formData.nouvelle_date_de_paiement} onChange={handleInputChange} required />
        <button type="submit">Ajouter</button>
      </form>

      <table>
        <thead>
          <tr>
            <th>Quittance</th>
            <th>Montant</th>
            <th>Rubrique</th>
            <th>Date du Dernier Paiement</th>
            <th>Nouvelle Date de Paiement</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {paiements.map(paiement => (
            <tr key={paiement.id}>
              <td>{paiement.quittance}</td>
              <td>{paiement.montant}</td>
              <td>{paiement.rubrique}</td>
              <td>{paiement.date_du_dernier_paiement}</td>
              <td>{paiement.nouvelle_date_de_paiement}</td>
              <td>
                <button onClick={() => handleEditPaiement(paiement.id)}>Modifier</button>
                <button onClick={() => handleDeletePaiement(paiement.id)}>Supprimer</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default PaiementExploitation;
