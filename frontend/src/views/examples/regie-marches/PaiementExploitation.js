import React, { useState, useEffect } from 'react';
import axios from 'axios';

const PaiementExploitation = () => {
    const [paiements, setPaiements] = useState([]);
    const [quittance, setQuittance] = useState('');
    const [montant, setMontant] = useState('');
    const [rubrique, setRubrique] = useState('');
    const [dateDernierPaiement, setDateDernierPaiement] = useState('');
    const [nouvelleDateDePaiement, setNouvelleDateDePaiement] = useState('');
    const [editId, setEditId] = useState(null);
    const [notification, setNotification] = useState(null);

    // Fetch all paiements from the backend
    const fetchPaiements = async () => {
        try {
            const response = await axios.get('http://localhost:8000/api/PaiementExploitation/');
            console.log('Fetched paiements with id:', response.data);
            setPaiements(response.data);
        } catch (error) {
            console.error('Error fetching paiements:', error);
            showNotification("Impossible de charger les paiements", "error");
        }
    };

    // Show notification
    const showNotification = (message, type = "success") => {
        setNotification({ message, type });
    };

    // Add a new paiement
    const addPaiement = async () => {
        const newPaiement = { quittance, montant, rubrique, date_du_dernier_paiement: dateDernierPaiement, nouvelle_date_de_paiement: nouvelleDateDePaiement };
        try {
            await axios.post('http://localhost:8000/api/PaiementExploitation/', newPaiement);
            fetchPaiements();  // Re-fetch paiements
            showNotification("Nouveau paiement ajouté avec succès");
            resetForm();
        } catch (error) {
            console.error('Error adding paiement:', error);
            showNotification("Erreur lors de l'ajout du paiement", "error");
        }
    };

    // Edit a paiement
    const editPaiement = async () => {
        const updatedPaiement = { quittance, montant, rubrique, date_du_dernier_paiement: dateDernierPaiement, nouvelle_date_de_paiement: nouvelleDateDePaiement };
        try {
            await axios.put(`http://localhost:8000/api/PaiementExploitation/${editId}/`, updatedPaiement);
            fetchPaiements();  // Re-fetch paiements
            setEditId(null);   // Reset editId after saving
            showNotification("Paiement mis à jour avec succès");
            resetForm();
        } catch (error) {
            console.error('Error editing paiement:', error);
            showNotification("Erreur lors de la modification du paiement", "error");
        }
    };

    // Delete a paiement
    const deletePaiement = async (id) => {
        if (!window.confirm('Êtes-vous sûr de vouloir supprimer ce paiement ?')) {
            return;
        }
        
        if (!id) {
            console.error('Invalid paiement id:', id);
            return;
        }
        console.log('Deleting paiement with id:', id);
        try {
            await axios.delete(`http://localhost:8000/api/PaiementExploitation/${id}/`);
            fetchPaiements();  // Re-fetch paiements after delete
            showNotification("Paiement supprimé avec succès");
        } catch (error) {
            console.error('Error deleting paiement:', error);
            showNotification("Erreur lors de la suppression du paiement", "error");
        }
    };

    // Reset form
    const resetForm = () => {
        setQuittance('');
        setMontant('');
        setRubrique('');
        setDateDernierPaiement('');
        setNouvelleDateDePaiement('');
    };

    // Cancel edit
    const handleCancelEdit = () => {
        resetForm();
        setEditId(null);
    };

    // Handle the form submit (add or edit)
    const handleSubmit = (e) => {
        e.preventDefault();
        if (editId) {
            editPaiement();
        } else {
            addPaiement();
        }
    };

    useEffect(() => {
        fetchPaiements();
    }, []);

    return (
        <div className="paiement-exploitation-container">
            <h2>Gestion des Paiements Exploitation</h2>
            
            {/* Notification Toast */}
            {notification && (
                <div className={`toast ${notification.type}`}>
                    <div className="toast-content">{notification.message}</div>
                    <button className="toast-close" onClick={() => setNotification(null)}>×</button>
                </div>
            )}
            
            <div className="section active">
                <div className="form-section">
                    <form onSubmit={handleSubmit} className="form-container">
                        <div className="form-field">
                            <label htmlFor="quittance">Quittance *</label>
                            <input
                                id="quittance"
                                type="number"
                                name="quittance"
                                value={quittance}
                                onChange={(e) => setQuittance(e.target.value)}
                                placeholder="Numéro de quittance"
                                required
                            />
                        </div>
                        
                        <div className="form-field">
                            <label htmlFor="montant">Montant *</label>
                            <input
                                id="montant"
                                type="number"
                                name="montant"
                                value={montant}
                                onChange={(e) => setMontant(e.target.value)}
                                placeholder="Montant du paiement"
                                required
                            />
                        </div>
                        
                        <div className="form-field">
                            <label htmlFor="rubrique">Rubrique *</label>
                            <input
                                id="rubrique"
                                type="number"
                                name="rubrique"
                                value={rubrique}
                                onChange={(e) => setRubrique(e.target.value)}
                                placeholder="Numéro de rubrique"
                                required
                            />
                        </div>
                        
                        <div className="form-row">
                            <div className="form-field">
                                <label htmlFor="dateDernierPaiement">Date Dernier Paiement *</label>
                                <input
                                    id="dateDernierPaiement"
                                    type="date"
                                    name="dateDernierPaiement"
                                    value={dateDernierPaiement}
                                    onChange={(e) => setDateDernierPaiement(e.target.value)}
                                    required
                                />
                            </div>
                            
                            <div className="form-field">
                                <label htmlFor="nouvelleDateDePaiement">Nouvelle Date Paiement *</label>
                                <input
                                    id="nouvelleDateDePaiement"
                                    type="date"
                                    name="nouvelleDateDePaiement"
                                    value={nouvelleDateDePaiement}
                                    onChange={(e) => setNouvelleDateDePaiement(e.target.value)}
                                    required
                                />
                            </div>
                        </div>
                        
                        <div className="form-actions">
                            <button type="submit">
                                {editId ? 'Mettre à jour' : 'Ajouter'} le paiement
                            </button>
                            {editId && (
                                <button type="button" onClick={handleCancelEdit} className="cancel-button">
                                    Annuler
                                </button>
                            )}
                        </div>
                    </form>
                </div>
                
                <div className="data-section">
                    <h3>Liste des paiements</h3>
                    <div className="table-responsive">
                        {paiements.length > 0 ? (
                            <table>
                                <thead>
                                    <tr>
                                        <th>Quittance</th>
                                        <th>Montant</th>
                                        <th>Rubrique</th>
                                        <th>Date Dernier Paiement</th>
                                        <th>Nouvelle Date Paiement</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {paiements.map((paiement) => (
                                        <tr key={paiement.id}>
                                            <td>{paiement.quittance}</td>
                                            <td>{paiement.montant}</td>
                                            <td>{paiement.rubrique}</td>
                                            <td>{paiement.date_du_dernier_paiement}</td>
                                            <td>{paiement.nouvelle_date_de_paiement}</td>
                                            <td className="action-buttons">
                                                <button 
                                                    className="edit" 
                                                    onClick={() => { 
                                                        setEditId(paiement.id);
                                                        setQuittance(paiement.quittance);
                                                        setMontant(paiement.montant);
                                                        setRubrique(paiement.rubrique);
                                                        setDateDernierPaiement(paiement.date_du_dernier_paiement);
                                                        setNouvelleDateDePaiement(paiement.nouvelle_date_de_paiement);
                                                        window.scrollTo({ top: 0, behavior: 'smooth' });
                                                    }}
                                                    aria-label="Modifier"
                                                >
                                                    <i className="fa fa-edit"></i>
                                                </button>
                                                <button 
                                                    className="delete" 
                                                    onClick={() => deletePaiement(paiement.id)}
                                                    aria-label="Supprimer"
                                                >
                                                    <i className="fa fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        ) : (
                            <div className="no-data">Aucun paiement disponible</div>
                        )}
                    </div>
                </div>
            </div>
            
            <style jsx>{`
                .paiement-exploitation-container {
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 20px;
                    font-family: Arial, sans-serif;
                }
                
                h2 {
                    color: #333;
                    margin-bottom: 20px;
                    text-align: center;
                }
                
                h3 {
                    color: #555;
                    margin-bottom: 15px;
                }
                
                .section {
                    display: flex;
                    flex-direction: column;
                    gap: 30px;
                }
                
                .form-section {
                    background-color: #f9f9f9;
                    padding: 20px;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
                }
                
                .form-container {
                    display: flex;
                    flex-direction: column;
                    gap: 15px;
                }
                
                .form-field {
                    display: flex;
                    flex-direction: column;
                    gap: 5px;
                }
                
                .form-field label {
                    font-weight: bold;
                    color: #555;
                }
                
                .form-row {
                    display: flex;
                    gap: 15px;
                }
                
                .form-row .form-field {
                    flex: 1;
                }
                
                input, select, textarea {
                    padding: 10px;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    font-size: 14px;
                }
                
                textarea {
                    min-height: 80px;
                }
                
                .form-actions {
                    display: flex;
                    gap: 10px;
                    margin-top: 10px;
                }
                
                button {
                    padding: 10px 15px;
                    border: none;
                    border-radius: 4px;
                    cursor: pointer;
                    font-weight: bold;
                    transition: background-color 0.3s;
                }
                
                button[type="submit"] {
                    background-color: #3498db;
                    color: white;
                }
                
                button[type="submit"]:hover {
                    background-color: #2980b9;
                }
                
                .cancel-button {
                    background-color: #e74c3c;
                    color: white;
                }
                
                .cancel-button:hover {
                    background-color: #c0392b;
                }
                
                .data-section {
                    background-color: white;
                    padding: 20px;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                }
                
                .table-responsive {
                    overflow-x: auto;
                }
                
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                
                th, td {
                    padding: 12px;
                    text-align: left;
                    border-bottom: 1px solid #ddd;
                }
                
                th {
                    background-color: #f9f9f9;
                    font-weight: bold;
                    color: #555;
                }
                
                tr:hover {
                    background-color: #f9f9f9;
                }
                
                .action-buttons {
                    display: flex;
                    gap: 10px;
                }
                
                .edit {
                    background-color: #2ecc71;
                    color: white;
                    padding: 5px 10px;
                    border-radius: 4px;
                    font-size: 12px;
                }
                
                .edit:hover {
                    background-color: #27ae60;
                }
                
                .delete {
                    background-color: #e74c3c;
                    color: white;
                    padding: 5px 10px;
                    border-radius: 4px;
                    font-size: 12px;
                }
                
                .delete:hover {
                    background-color: #c0392b;
                }
                
                .loading {
                    text-align: center;
                    padding: 20px;
                    color: #666;
                }
                
                .no-data {
                    text-align: center;
                    padding: 20px;
                    color: #666;
                    font-style: italic;
                }
                
                .toast {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 12px 20px;
                    border-radius: 4px;
                    background-color: #2ecc71;
                    color: white;
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    gap: 10px;
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
                    z-index: 1000;
                    max-width: 350px;
                }
                
                .toast.error {
                    background-color: #e74c3c;
                }
                
                .toast-close {
                    background: none;
                    border: none;
                    color: white;
                    font-size: 20px;
                    cursor: pointer;
                    padding: 0;
                }
            `}</style>
        </div>
    );
};

export default PaiementExploitation;